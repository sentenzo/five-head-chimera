version: "3"

services:

  frontend:
    image: fhc/frontend
    build:
      context: frontend
    ports:
      - 8888:80
    depends_on:
      - backend
    # volumes:
    #   - ./frontend/static:/app/static:ro

  backend:
    image: fhc/backend
    ports:
      - 9999:8000 # if changing local port, also change the URL in frontend/static/script.js
    build:
      context: ./backend
    env_file:
      - rabbitmq.env
    depends_on:
      rabbitmq-master:
        condition: service_healthy
    # volumes:
    #   - ./backend/service:/usr/src/app:ro

  rabbitmq-master:
    hostname: rabbit-host
    image: fhc/rabbitmq
    build:
      context: ./rabbitmq
    environment:
      - RABBITMQ_NODENAME=sunny-rabbit
    ports:
      - 5672:5672
      - 15672:15672 # the default user:pass is guest:guest
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 8s
      timeout: 5s
      retries: 10

  rabbitmq-slave-1:
    hostname: rabbit-slave-1
    image: fhc/rabbitmq
    build:
      context: ./rabbitmq
    links:
      - rabbitmq-master
    environment:
      - RABBITMQ_NODENAME=moony-rabbit
    ports:
      - 5677:5672
      - 15677:15672
    volumes:
      - ./rabbitmq/cluster-entrypoint.sh:/usr/local/bin/cluster-entrypoint.sh
    depends_on:
      rabbitmq-master:
        condition: service_healthy
    entrypoint: /usr/local/bin/cluster-entrypoint.sh

  rabbitmq-slave-2:
    hostname: rabbit-slave-2
    image: fhc/rabbitmq
    build:
      context: ./rabbitmq
    links:
      - rabbitmq-master
    environment:
      - RABBITMQ_NODENAME=nighty-rabbitmq
    ports:
      - 5678:5672
      - 15678:15672
    volumes:
      - ./rabbitmq/cluster-entrypoint.sh:/usr/local/bin/cluster-entrypoint.sh
    depends_on:
      rabbitmq-master:
        condition: service_healthy

    entrypoint: /usr/local/bin/cluster-entrypoint.sh

  dbwriter:
    image: fhc/dbwriter
    build:
      context: ./dbwriter
    env_file:
      - rabbitmq.env
      - db.env
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      rabbitmq-master:
        condition: service_healthy
      db:
        condition: service_healthy

  db:
    image: fhc/db
    build:
      context: ./db
    env_file:
      - db.env
    ports:
      - 6789:5432
    volumes:
      - ./.docker-volumes/db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "$(POSTGRES_DB)" ]
      interval: 8s
      timeout: 5s
      retries: 10
